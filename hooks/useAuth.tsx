import React, { useState, useEffect, createContext, useContext } from "react";import { User } from "../types";import { getUser, removeUser, removeToken } from "../utils/auth";interface AuthContextProps {  user: (User & { isAvailable?: boolean }) | null;  isLoading: boolean;  logout: () => void;}const AuthContext = createContext<AuthContextProps>({   user: null,   isLoading: true,  logout: () => {} });export const AuthProvider = ({ children }: { children: React.ReactNode }) => {  const [user, setUser] = useState<(User & { isAvailable?: boolean }) | null>(null);  const [isLoading, setIsLoading] = useState(true);  useEffect(() => {    const loadUser = () => {      try {        const userData = getUser();        setUser(userData);      } catch (error) {        console.error('Failed to load user:', error);        setUser(null);      } finally {        setIsLoading(false);      }    };    loadUser();  }, []);  const logout = () => {    removeToken();    removeUser();    setUser(null);    window.location.href = "/auth/login";  };  return (    <AuthContext.Provider value={{ user, isLoading, logout }}>      {children}    </AuthContext.Provider>  );};export const useAuth = () => useContext(AuthContext);