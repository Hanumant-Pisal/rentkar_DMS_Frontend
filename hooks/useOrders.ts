import useSWR, { useSWRConfig } from "swr";import API from "../utils/api";import { Order } from "../types";export interface CreateOrderData {  customerName: string;  customerPhone: string;  pickupAddress: string;  deliveryAddress: string;  pickupLocation: {    type: "Point";    coordinates: [number, number];   };  deliveryLocation: {    type: "Point";    coordinates: [number, number];   };  items: Array<{    name: string;    qty: number;  }>;}export type UpdateOrderData = Partial<Omit<CreateOrderData, 'deliveryLocation' | 'pickupLocation'>> & {  status?: Order['status'];  assignedTo?: string | null;  pickupAddress?: string;  deliveryAddress?: string;  pickupLocation?: {    type: "Point";    coordinates: [number, number];  };  deliveryLocation?: {    type: "Point";    coordinates: [number, number];  };};export const useOrders = () => {  const { mutate } = useSWRConfig();  const fetcher = (url: string) => API.get(url).then(res => res.data.orders as Order[]);  const { data, error, isLoading } = useSWR("/orders", fetcher);  const createOrder = async (orderData: CreateOrderData) => {    try {      const response = await API.post("/orders", orderData);      await mutate("/orders");      return response.data;    } catch (error) {      console.error("Failed to create order:", error);      throw error;    }  };  const updateOrder = async (orderId: string, updateData: UpdateOrderData) => {    try {      const response = await API.put(`/orders/${orderId}`, updateData);      await mutate("/orders");      return response.data;    } catch (error) {      console.error(`Failed to update order ${orderId}:`, error);      throw error;    }  };  const deleteOrder = async (orderId: string) => {    try {      await API.delete(`/orders/${orderId}`);      await mutate("/orders");      return true;    } catch (error) {      console.error(`Failed to delete order ${orderId}:`, error);      throw error;    }  };  return {     orders: data || [],     error,     mutate,     createOrder,    updateOrder,    deleteOrder,    isLoading: isLoading || (!error && !data)   };};