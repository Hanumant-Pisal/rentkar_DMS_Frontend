import PartnerLayout from "@/components/layout/PartnerLayout";import { usePartnerOrders } from "@/hooks/usePartnerOrders";import { useAuth } from "@/hooks/useAuth";import OrderList from "@/components/orders/OrderList";import { withAuth } from "@/components/auth/AuthGuard";import { motion } from 'framer-motion';import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";import { Button } from "@/components/ui/button";import { Package, Clock, CheckCircle, AlertCircle } from "lucide-react";import AvailabilityToggle from "@/components/partner/AvailabilityToggle";const stats = [  { name: 'Total Orders', value: '0', icon: Package, change: '+0%', changeType: 'neutral' },  { name: 'Completed', value: '0', icon: CheckCircle, change: '0', changeType: 'neutral' },  { name: 'In Progress', value: '0', icon: Clock, change: '0', changeType: 'neutral' },  { name: 'Issues', value: '0', icon: AlertCircle, change: '0', changeType: 'neutral' },];function PartnerDashboard() {  const { user } = useAuth();  const { orders: assignedOrders, isLoading: isLoadingOrders } = usePartnerOrders();  const completedOrders = assignedOrders.filter(order => order.status === 'delivered').length;  const inProgressOrders = assignedOrders.filter(order =>     ['assigned', 'picked_up', 'in_transit'].includes(order.status)  ).length;  const issueOrders = assignedOrders.filter(order => order.status === 'cancelled').length;  if (!isLoadingOrders) {    stats[0].value = assignedOrders.length.toString();    stats[1].value = completedOrders.toString();    stats[2].value = inProgressOrders.toString();    stats[3].value = issueOrders.toString();  }  if (isLoadingOrders) {    return (      <PartnerLayout>        <div className="flex justify-center items-center h-64">          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>        </div>      </PartnerLayout>    );  }  return (    <PartnerLayout>      <motion.div        initial={{ opacity: 0, y: 20 }}        animate={{ opacity: 1, y: 0 }}        transition={{ duration: 0.5 }}        className="space-y-8"      >        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">          <div>            <h1 className="text-3xl font-bold text-white">Dashboard</h1>            <p className="text-gray-300">Welcome back, {user?.name || 'Partner'}! Here's your order summary.</p>          </div>          <div className="flex items-center gap-3">            {user && (              <div className="bg-white/5 backdrop-blur-sm p-1 rounded-lg border border-white/10 shadow-lg">                <AvailabilityToggle isAvailable={user.isAvailable ?? false} />              </div>            )}            <Button asChild variant="outline" className="bg-transparent hover:bg-white/10 border-white/20 text-white">              <a href="/partner/orders">                <Package className="mr-2 h-4 w-4" />                View All Orders              </a>            </Button>          </div>        </div>        {}        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">          {stats.map((stat, statIdx) => (            <Card key={statIdx} className="bg-white/5 border-white/10 text-white">              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">                <CardTitle className="text-sm font-medium text-gray-300">                  {stat.name}                </CardTitle>                <stat.icon className="h-4 w-4 text-gray-300" />              </CardHeader>              <CardContent>                <div className="text-2xl font-bold">{stat.value}</div>                <p className="text-xs text-gray-400">                  {stat.changeType === 'increase' ? '↑' : stat.changeType === 'decrease' ? '↓' : '→'} {stat.change}                </p>              </CardContent>            </Card>          ))}        </div>        {}        <Card className="bg-white/5 border-white/10">          <CardHeader>            <CardTitle className="text-white">Recent Orders</CardTitle>          </CardHeader>          <CardContent>            {assignedOrders.length > 0 ? (              <OrderList orders={assignedOrders.slice(0, 5)} />            ) : (              <div className="text-center py-8">                <Package className="mx-auto h-12 w-12 text-gray-400" />                <h3 className="mt-2 text-sm font-medium text-white">No orders assigned</h3>              </div>            )}          </CardContent>        </Card>      </motion.div>    </PartnerLayout>  );}export default withAuth(PartnerDashboard, 'partner');