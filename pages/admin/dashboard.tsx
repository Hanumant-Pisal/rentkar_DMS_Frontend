import AdminLayout from "@/components/layout/AdminLayout";import { useOrders } from "@/hooks/useOrders";import { useAdminStats } from "@/hooks/useAdminStats";import OrderList from "@/components/orders/OrderList";import Link from "next/link";import { withAuth } from "@/components/auth/AuthGuard";import { motion } from 'framer-motion';import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";import { Button } from "@/components/ui/button";import { Briefcase, Users, Package, Clock, Loader2, BarChart2, PieChart as PieChartIcon } from "lucide-react";import { OrdersBarChart } from "@/components/admin/charts/OrdersBarChart";import { StatusPieChart } from "@/components/admin/charts/StatusPieChart";const formatNumber = (num: number): string => {  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");};const formatCurrency = (amount: number): string => {  return new Intl.NumberFormat('en-IN', {    style: 'currency',    currency: 'INR',    maximumFractionDigits: 0  }).format(amount);};const getChangeInfo = (change: number) => {  if (change > 0) return { change: `+${change}%`, type: 'increase' as const };  if (change < 0) return { change: `${change}%`, type: 'decrease' as const };  return { change: '0%', type: 'neutral' as const };};function AdminDashboard() {  const { data: stats, isLoading: isLoadingStats } = useAdminStats();  const { orders, isLoading: isLoadingOrders } = useOrders();  const recentOrders = orders.slice(0, 5);   const monthlyOrdersData = stats?.monthlyOrders?.map(item => ({    name: item.month,    orders: item.orders,    revenue: item.revenue  })) || [];  const orderStatusData = stats?.orderStatus?.map(item => ({    name: item.status,    value: item.count  })) || [];  interface StatItem {    name: string;    value: string;    displayValue: string;    icon: any;    change: string;    type: 'increase' | 'decrease' | 'neutral';  }  const statsData = (stats ? [    {      name: 'Total Orders',      value: formatNumber(stats.totalOrders),      displayValue: formatNumber(stats.totalOrders),      icon: Package,      ...getChangeInfo(stats.statsChange.ordersChange)    },    {      name: 'Active Partners',      value: formatNumber(stats.activePartners),      displayValue: formatNumber(stats.activePartners),      icon: Users,      ...getChangeInfo(stats.statsChange.partnersChange)    },    {      name: 'Pending Orders',      value: formatNumber(stats.pendingOrders),      displayValue: formatNumber(stats.pendingOrders),      icon: Clock,      ...getChangeInfo(stats.statsChange.pendingOrdersChange)    },    {      name: 'Total Partners',      value: formatNumber(stats.totalPartners),      displayValue: formatNumber(stats.totalPartners),      icon: Users,      ...getChangeInfo(stats.statsChange.totalPartnersChange)    },  ] : [    {      name: 'Total Orders',      value: '--',      displayValue: '--',      icon: Package,      change: '0%',      type: 'neutral' as const    },    {      name: 'Active Partners',      value: '--',      displayValue: '--',      icon: Users,      change: '0%',      type: 'neutral' as const    },    {      name: 'Pending Orders',      value: '--',      displayValue: '--',      icon: Clock,      change: '0%',      type: 'neutral' as const    },    {      name: 'Total Partners',      value: '--',      displayValue: '--',      icon: Users,      change: '0%',      type: 'neutral' as const    },  ]) as StatItem[];  return (    <AdminLayout>      <motion.div        initial={{ opacity: 0, y: 20 }}        animate={{ opacity: 1, y: 0 }}        transition={{ duration: 0.5 }}        className="space-y-8"      >        <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">          <div>            <h1 className="text-3xl font-bold text-white">Dashboard</h1>            <p className="text-gray-300">Welcome back! Here's what's happening with your platform.</p>          </div>          <div className="flex gap-3">            <Button asChild variant="outline" className="bg-transparent hover:bg-white/10 border-white/20 text-white">              <Link href="/admin/orders">                <Package className="mr-2 h-4 w-4" />                Manage Orders              </Link>            </Button>            <Button asChild className="bg-blue-600 hover:bg-blue-700">              <Link href="/admin/partners">                <Users className="mr-2 h-4 w-4" />                Manage Partners              </Link>            </Button>          </div>        </div>        {}        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">          {statsData.map((stat, index) => (            <motion.div              key={stat.name}              initial={{ opacity: 0, y: 20 }}              animate={{ opacity: 1, y: 0 }}              transition={{ delay: index * 0.1, duration: 0.5 }}            >              <Card className="bg-white/5 backdrop-blur-sm border-white/10 hover:bg-white/10 transition-colors h-full">                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">                  <CardTitle className="text-sm font-medium text-gray-300">                    {stat.name}                  </CardTitle>                  {isLoadingStats ? (                    <Loader2 className="h-5 w-5 text-blue-400 animate-spin" />                  ) : (                    <stat.icon className="h-5 w-5 text-blue-400" />                  )}                </CardHeader>                <CardContent>                  <div className="text-2xl font-bold text-white">                    {isLoadingStats ? '--' : stat.displayValue}                  </div>                  <p className={`text-xs mt-1 ${                    stat.type === 'increase' ? 'text-green-400' :                     stat.type === 'decrease' ? 'text-red-400' : 'text-yellow-400'                  }`}>                    {stat.change} {stat.type === 'increase' ? '↑' : stat.type === 'decrease' ? '↓' : '→'} from last month                  </p>                </CardContent>              </Card>            </motion.div>          ))}        </div>        {}        <div className="grid gap-6 md:grid-cols-1 lg:grid-cols-2">          <Card className="bg-white/5 backdrop-blur-sm border-white/10 p-4">            <div className="flex items-center mb-4">              <BarChart2 className="h-5 w-5 text-blue-400 mr-2" />              <h3 className="text-lg font-semibold text-white">Monthly Orders</h3>            </div>            <div className="h-80">              <OrdersBarChart data={monthlyOrdersData} />            </div>          </Card>          <Card className="bg-white/5 backdrop-blur-sm border-white/10 p-4">            <div className="flex items-center mb-4">              <PieChartIcon className="h-5 w-5 text-blue-400 mr-2" />              <h3 className="text-lg font-semibold text-white">Order Status</h3>            </div>            <div className="h-80">              <StatusPieChart data={orderStatusData} />            </div>          </Card>        </div>        {}        <motion.div          initial={{ opacity: 0, y: 20 }}          animate={{ opacity: 1, y: 0 }}          transition={{ delay: 0.2, duration: 0.5 }}        >          <Card className="bg-white/5 backdrop-blur-sm border-white/10">            <CardHeader>              <CardTitle className="text-white">Recent Orders</CardTitle>            </CardHeader>            <CardContent>              {isLoadingOrders ? (                <div className="flex justify-center py-8">                  <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>                </div>              ) : (                <>                  <OrderList orders={recentOrders} partners={[]} />                  {recentOrders.length === 0 && (                    <div className="text-center py-8 text-gray-400">                      No recent orders found                    </div>                  )}                </>              )}            </CardContent>          </Card>        </motion.div>      </motion.div>    </AdminLayout>  );}export default withAuth(AdminDashboard, 'admin');